package pe.edu.upc.parkingnow.presentation.view

import android.graphics.Bitmap
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.google.zxing.BarcodeFormat
import com.google.zxing.MultiFormatWriter
import com.google.zxing.common.BitMatrix
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@Composable
fun PaymentScreen(navController: NavController) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()

    var selectedMethod by remember { mutableStateOf("Visa") }

    // Visa fields
    var cardNumber by remember { mutableStateOf("") }
    var cardHolder by remember { mutableStateOf("") }
    var expiryDate by remember { mutableStateOf("") }
    var cvv by remember { mutableStateOf("") }

    // Yape / Plin
    var phoneNumber by remember { mutableStateOf("") }

    var ticketGenerated by remember { mutableStateOf(false) }
    var ticketCode by remember { mutableStateOf("") }
    var barcodeBitmap by remember { mutableStateOf<Bitmap?>(null) }

    fun generateBarcodeBitmap(text: String): Bitmap {
        val bitMatrix: BitMatrix = MultiFormatWriter().encode(text, BarcodeFormat.CODE_128, 600, 200)
        val width = bitMatrix.width
        val height = bitMatrix.height
        val bmp = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565)
        for (x in 0 until width) {
            for (y in 0 until height) {
                bmp.setPixel(x, y, if (bitMatrix.get(x, y)) android.graphics.Color.BLACK else android.graphics.Color.WHITE)
            }
        }
        return bmp
    }

    if (!ticketGenerated) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFFEFF3FF)),
            contentAlignment = Alignment.Center
        ) {
            Column(
                modifier = Modifier
                    .background(Color.White, shape = RoundedCornerShape(16.dp))
                    .padding(24.dp)
                    .fillMaxWidth(0.9f),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("Selecciona método de pago", fontSize = 20.sp, fontWeight = FontWeight.Bold)

                Spacer(modifier = Modifier.height(16.dp))

                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                    listOf("Visa", "Yape", "Plin").forEach { method ->
                        Button(
                            onClick = { selectedMethod = method },
                            colors = ButtonDefaults.buttonColors(
                                containerColor = if (selectedMethod == method) Color(0xFF0A4FFF) else Color.LightGray
                            )
                        ) {
                            Text(method, color = Color.White)
                        }
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                when (selectedMethod) {
                    "Visa" -> {
                        OutlinedTextField(
                            value = cardNumber,
                            onValueChange = { cardNumber = it },
                            label = { Text("Card Number") },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            modifier = Modifier.fillMaxWidth()
                        )
                        OutlinedTextField(
                            value = cardHolder,
                            onValueChange = { cardHolder = it },
                            label = { Text("Card Holder Name") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        OutlinedTextField(
                            value = expiryDate,
                            onValueChange = { expiryDate = it },
                            label = { Text("Expiry Date (MM/YY)") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        OutlinedTextField(
                            value = cvv,
                            onValueChange = { cvv = it },
                            label = { Text("CVV") },
                            visualTransformation = PasswordVisualTransformation(),
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            modifier = Modifier.fillMaxWidth()
                        )
                    }
                    "Yape", "Plin" -> {
                        OutlinedTextField(
                            value = phoneNumber,
                            onValueChange = { phoneNumber = it },
                            label = { Text("Phone Number") },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),
                            modifier = Modifier.fillMaxWidth()
                        )
                    }
                }

                Spacer(modifier = Modifier.height(24.dp))

                Button(
                    onClick = {
                        val isVisaValid = selectedMethod == "Visa" &&
                                cardNumber.isNotBlank() && cardHolder.isNotBlank() && expiryDate.isNotBlank() && cvv.isNotBlank()

                        val isOtherValid = (selectedMethod == "Yape" || selectedMethod == "Plin") &&
                                phoneNumber.isNotBlank()

                        if (isVisaValid || isOtherValid) {
                            val generatedCode = "PN-" + (100000..999999).random()
                            ticketCode = generatedCode
                            barcodeBitmap = generateBarcodeBitmap(generatedCode)
                            ticketGenerated = true

                            scope.launch {
                                delay(10000)
                                navController.navigate("success")
                            }
                        } else {
                            Toast.makeText(context, "Complete all required fields", Toast.LENGTH_SHORT).show()
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(12.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF0A4FFF))
                ) {
                    Text("Pagar", fontSize = 16.sp, color = Color.White)
                }
            }
        }
    } else {
        // ticket view pantalla completa
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFF4468FF))
                .padding(24.dp),
            contentAlignment = Alignment.Center
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White, shape = RoundedCornerShape(16.dp))
                    .padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("Parking Larcomar", fontWeight = FontWeight.Bold, fontSize = 16.sp)
                Text("Malecón de la Reserva, Miraflores", fontSize = 12.sp, color = Color.Gray)

                Spacer(modifier = Modifier.height(16.dp))

                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(Color(0xFFF5F5F5), shape = RoundedCornerShape(8.dp))
                        .padding(16.dp)
                ) {
                    Text("VEHICLE", fontSize = 12.sp, color = Color.Gray)
                    Text("2021 Audi Q3 • B 1234 CD", fontSize = 14.sp, fontWeight = FontWeight.Medium)

                    Spacer(modifier = Modifier.height(12.dp))

                    Text("DURATION", fontSize = 12.sp, color = Color.Gray)
                    Text("1 hora • 26 May. 2025", fontSize = 14.sp, fontWeight = FontWeight.Medium)
                }

                Spacer(modifier = Modifier.height(12.dp))

                Text("Slot A01", fontWeight = FontWeight.Bold, fontSize = 18.sp)

                Spacer(modifier = Modifier.height(16.dp))

                Image(
                    bitmap = barcodeBitmap!!.asImageBitmap(),
                    contentDescription = "Código de barras",
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(100.dp)
                )

                Spacer(modifier = Modifier.height(8.dp))

                Text("ID: $ticketCode", fontSize = 12.sp, color = Color.Gray)
            }
        }
    }
}
