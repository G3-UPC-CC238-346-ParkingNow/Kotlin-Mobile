package pe.edu.upc.parkingnow.presentation.view

import pe.edu.upc.parkingnow.presentation.navigation.Routes

import androidx.compose.foundation.Canvas
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.drawscope.Fill
import androidx.compose.ui.graphics.PathEffect

import android.graphics.Bitmap
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.CreditCard
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material.icons.filled.PhoneAndroid
import androidx.compose.material.icons.filled.Payment
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.google.zxing.BarcodeFormat
import com.google.zxing.MultiFormatWriter
import com.google.zxing.common.BitMatrix
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@Composable
fun PaymentScreen(navController: NavController) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()

    var savedMethods by remember { mutableStateOf(mutableListOf<Map<String, String>>()) }
    var editingIndex by remember { mutableStateOf<Int?>(null) }
    var selectedNewMethod by remember { mutableStateOf("Visa") }

    // New method input fields
    var newCardNumber by remember { mutableStateOf("") }
    var newCardHolder by remember { mutableStateOf("") }
    var newExpiryDate by remember { mutableStateOf("") }
    var newCvv by remember { mutableStateOf("") }
    var newPhoneNumber by remember { mutableStateOf("") }
    var newApprovalCode by remember { mutableStateOf("") }

    // Approval code for active Yape payment
    var activeApprovalCode by remember { mutableStateOf("") }

    // Active method for payment
    var activeMethodIndex by remember { mutableStateOf<Int?>(null) }
    var activeMethodType by remember { mutableStateOf<String?>(null) }
    var activeCardNumber by remember { mutableStateOf("") }
    var activeCardHolder by remember { mutableStateOf("") }
    var activeExpiryDate by remember { mutableStateOf("") }
    var activeCvv by remember { mutableStateOf("") }
    var activePhoneNumber by remember { mutableStateOf("") }

    var ticketGenerated by remember { mutableStateOf(false) }
    var ticketCode by remember { mutableStateOf("") }
    var barcodeBitmap by remember { mutableStateOf<Bitmap?>(null) }

    fun generateBarcodeBitmap(text: String): Bitmap {
        val bitMatrix: BitMatrix = MultiFormatWriter().encode(text, BarcodeFormat.CODE_128, 600, 200)
        val width = bitMatrix.width
        val height = bitMatrix.height
        val bmp = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565)
        for (x in 0 until width) {
            for (y in 0 until height) {
                bmp.setPixel(x, y, if (bitMatrix.get(x, y)) android.graphics.Color.BLACK else android.graphics.Color.WHITE)
            }
        }
        return bmp
    }

    fun clearNewMethodFields() {
        newCardNumber = ""
        newCardHolder = ""
        newExpiryDate = ""
        newCvv = ""
        newPhoneNumber = ""
        selectedNewMethod = "Visa"
        editingIndex = null
    }

    if (!ticketGenerated) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFFEFF3FF))
                .padding(16.dp)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White, shape = RoundedCornerShape(16.dp))
                    .padding(24.dp)
                    .fillMaxWidth(0.9f)
                    .verticalScroll(rememberScrollState()),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Saved Payment Methods Section
                Text("Métodos de Pago Guardados", fontSize = 20.sp, fontWeight = FontWeight.Bold)
                Spacer(modifier = Modifier.height(12.dp))
                if (savedMethods.isEmpty()) {
                    Text("No hay métodos guardados.", fontSize = 14.sp, color = Color.Gray)
                } else {
                    savedMethods.forEachIndexed { index, method ->
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp)
                        ) {
                            val type = method["type"] ?: ""
                            // Icono representativo a la izquierda
                            val icon = when (type) {
                                "Visa" -> Icons.Filled.CreditCard
                                "Yape", "Plin" -> Icons.Filled.PhoneAndroid
                                else -> Icons.Filled.Payment
                            }
                            Icon(
                                imageVector = icon,
                                contentDescription = type,
                                modifier = Modifier.size(24.dp).padding(end = 8.dp),
                                tint = Color(0xFF4468FF)
                            )
                            Text(
                                when(type) {
                                    "Visa" -> "Visa • ${method["cardHolder"] ?: ""} • ${method["cardNumber"]?.takeLast(4) ?: ""}"
                                    "Yape", "Plin" -> "$type • ${method["phoneNumber"] ?: ""}"
                                    else -> type
                                },
                                modifier = Modifier.weight(1f),
                                fontSize = 14.sp
                            )
                            IconButton(onClick = {
                                editingIndex = index
                                val m = savedMethods[index]
                                selectedNewMethod = m["type"] ?: "Visa"
                                if (selectedNewMethod == "Visa") {
                                    newCardNumber = m["cardNumber"] ?: ""
                                    newCardHolder = m["cardHolder"] ?: ""
                                    newExpiryDate = m["expiryDate"] ?: ""
                                    newCvv = m["cvv"] ?: ""
                                    newPhoneNumber = ""
                                } else {
                                    newPhoneNumber = m["phoneNumber"] ?: ""
                                    newCardNumber = ""
                                    newCardHolder = ""
                                    newExpiryDate = ""
                                    newCvv = ""
                                }
                            }) {
                                Icon(imageVector = Icons.Default.Edit, contentDescription = "Editar método")
                            }
                            Button(
                                onClick = {
                                    activeMethodIndex = index
                                    activeMethodType = method["type"]
                                    if (activeMethodType == "Visa") {
                                        activeCardNumber = method["cardNumber"] ?: ""
                                        activeCardHolder = method["cardHolder"] ?: ""
                                        activeExpiryDate = method["expiryDate"] ?: ""
                                        activeCvv = method["cvv"] ?: ""
                                        activePhoneNumber = ""
                                    } else {
                                        activePhoneNumber = method["phoneNumber"] ?: ""
                                        activeCardNumber = ""
                                        activeCardHolder = ""
                                        activeExpiryDate = ""
                                        activeCvv = ""
                                    }
                                    // Set approval code for Yape on use
                                    activeApprovalCode = method["approvalCode"] ?: ""
                                },
                                modifier = Modifier
                                    .padding(start = 8.dp)
                                    .defaultMinSize(minWidth = 110.dp)
                                    .padding(horizontal = 2.dp),
                                shape = RoundedCornerShape(24.dp),
                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4468FF))
                            ) {
                                Text("Usar", maxLines = 1, softWrap = false, color = Color.White)
                            }
                            IconButton(
                                onClick = {
                                    // Eliminar el método correspondiente
                                    savedMethods = savedMethods.toMutableList().also { list ->
                                        list.removeAt(index)
                                    }
                                    // Si eliminamos el método activo, reiniciar activeMethodIndex y activeMethodType
                                    if (activeMethodIndex == index) {
                                        activeMethodIndex = null
                                        activeMethodType = null
                                    } else if (activeMethodIndex != null && activeMethodIndex!! > index) {
                                        // Ajustar el índice activo si era después del eliminado
                                        activeMethodIndex = activeMethodIndex!! - 1
                                    }
                                }
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Delete,
                                    contentDescription = "Eliminar método"
                                )
                            }
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                Divider(modifier = Modifier.fillMaxWidth(), color = Color(0xFFEEEEEE))
                Spacer(modifier = Modifier.height(16.dp))

                // New Payment Method Section
                Text("Pagar con Nuevo Método", fontSize = 20.sp, fontWeight = FontWeight.Bold)
                Spacer(modifier = Modifier.height(12.dp))
                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                    listOf("Visa", "Yape").forEach { method ->
                        val icon = when (method) {
                            "Visa" -> Icons.Filled.CreditCard
                            "Yape" -> Icons.Filled.PhoneAndroid
                            else -> Icons.Filled.Payment
                        }
                        Button(
                            onClick = { selectedNewMethod = method },
                            colors = ButtonDefaults.buttonColors(
                                containerColor = if (selectedNewMethod == method) Color(0xFF4468FF) else Color(0xFFEFF3FF)
                            ),
                            modifier = Modifier
                                .defaultMinSize(minWidth = 110.dp)
                                .padding(horizontal = 0.dp),
                            shape = RoundedCornerShape(24.dp)
                        ) {
                            Icon(
                                imageVector = icon,
                                contentDescription = method,
                                tint = if (selectedNewMethod == method) Color.White else Color(0xFF4468FF),
                                modifier = Modifier.size(18.dp).padding(end = 4.dp)
                            )
                            Text(
                                method,
                                color = if (selectedNewMethod == method) Color.White else Color(0xFF4468FF),
                                maxLines = 1,
                                softWrap = false
                            )
                        }
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))
                when (selectedNewMethod) {
                    "Visa" -> {
                        OutlinedTextField(
                            value = newCardNumber,
                            onValueChange = { newCardNumber = it },
                            label = { Text("Card Number") },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            modifier = Modifier.fillMaxWidth(),
                            leadingIcon = {
                                Icon(
                                    imageVector = Icons.Filled.CreditCard,
                                    contentDescription = "Credit Card"
                                )
                            }
                        )
                        OutlinedTextField(
                            value = newCardHolder,
                            onValueChange = { newCardHolder = it },
                            label = { Text("Card Holder Name") },
                            modifier = Modifier.fillMaxWidth(),
                            leadingIcon = {
                                Icon(
                                    imageVector = Icons.Filled.Person,
                                    contentDescription = "Card Holder"
                                )
                            }
                        )
                        OutlinedTextField(
                            value = newExpiryDate,
                            onValueChange = { newExpiryDate = it },
                            label = { Text("Expiry Date (MM/YY)") },
                            modifier = Modifier.fillMaxWidth(),
                            leadingIcon = {
                                Icon(
                                    imageVector = Icons.Filled.DateRange,
                                    contentDescription = "Expiry Date"
                                )
                            }
                        )
                        OutlinedTextField(
                            value = newCvv,
                            onValueChange = { newCvv = it },
                            label = { Text("CVV") },
                            visualTransformation = PasswordVisualTransformation(),
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            modifier = Modifier.fillMaxWidth(),
                            leadingIcon = {
                                Icon(
                                    imageVector = Icons.Filled.Lock,
                                    contentDescription = "CVV"
                                )
                            }
                        )
                    }
                    "Yape" -> {
                        OutlinedTextField(
                            value = newPhoneNumber,
                            onValueChange = { newPhoneNumber = it },
                            label = { Text("Phone Number") },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),
                            modifier = Modifier.fillMaxWidth(),
                            leadingIcon = {
                                Icon(
                                    imageVector = Icons.Filled.PhoneAndroid,
                                    contentDescription = "Phone"
                                )
                            }
                        )
                        // Approval code field REMOVED from here (moved to active payment section)
                    }
                }
                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        val isVisaValid = selectedNewMethod == "Visa" &&
                                newCardNumber.isNotBlank() && newCardHolder.isNotBlank() && newExpiryDate.isNotBlank() && newCvv.isNotBlank()

                        val isOtherValid = selectedNewMethod == "Yape" &&
                                newPhoneNumber.isNotBlank()

                        if (isVisaValid || isOtherValid) {
                            val newMethodMap = mutableMapOf<String, String>()
                            newMethodMap["type"] = selectedNewMethod
                            if (selectedNewMethod == "Visa") {
                                newMethodMap["cardNumber"] = newCardNumber
                                newMethodMap["cardHolder"] = newCardHolder
                                newMethodMap["expiryDate"] = newExpiryDate
                                newMethodMap["cvv"] = newCvv
                            } else {
                                newMethodMap["phoneNumber"] = newPhoneNumber
                                // No approval code stored at save time for Yape
                            }
                            if (editingIndex != null) {
                                savedMethods[editingIndex!!] = newMethodMap
                                activeMethodIndex = editingIndex
                                activeMethodType = selectedNewMethod
                                if (selectedNewMethod == "Visa") {
                                    activeCardNumber = newCardNumber
                                    activeCardHolder = newCardHolder
                                    activeExpiryDate = newExpiryDate
                                    activeCvv = newCvv
                                    activePhoneNumber = ""
                                } else {
                                    activePhoneNumber = newPhoneNumber
                                    activeCardNumber = ""
                                    activeCardHolder = ""
                                    activeExpiryDate = ""
                                    activeCvv = ""
                                }
                                editingIndex = null
                            } else {
                                savedMethods.add(newMethodMap)
                                activeMethodIndex = savedMethods.size - 1
                                activeMethodType = selectedNewMethod
                                if (selectedNewMethod == "Visa") {
                                    activeCardNumber = newCardNumber
                                    activeCardHolder = newCardHolder
                                    activeExpiryDate = newExpiryDate
                                    activeCvv = newCvv
                                    activePhoneNumber = ""
                                } else {
                                    activePhoneNumber = newPhoneNumber
                                    activeCardNumber = ""
                                    activeCardHolder = ""
                                    activeExpiryDate = ""
                                    activeCvv = ""
                                }
                            }
                            clearNewMethodFields()
                        } else {
                            Toast.makeText(context, "Complete all required fields", Toast.LENGTH_SHORT).show()
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(24.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4468FF))
                ) {
                    Text("Guardar", fontSize = 16.sp, color = Color.White)
                }

                Spacer(modifier = Modifier.height(24.dp))
                Divider(modifier = Modifier.fillMaxWidth(), color = Color(0xFFEEEEEE))
                Spacer(modifier = Modifier.height(24.dp))
                // Pay with this method section
                Text("Pagar con este método", fontSize = 20.sp, fontWeight = FontWeight.Bold)
                Spacer(modifier = Modifier.height(16.dp))
                if (activeMethodIndex == null || activeMethodType == null) {
                    Text("Seleccione un método para pagar.", fontSize = 14.sp, color = Color.Gray)
                } else {
                    when (activeMethodType) {
                        "Visa" -> {
                            OutlinedTextField(
                                value = activeCardNumber,
                                onValueChange = { activeCardNumber = it },
                                label = { Text("Card Number") },
                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                                modifier = Modifier.fillMaxWidth(),
                                leadingIcon = {
                                    Icon(
                                        imageVector = Icons.Filled.CreditCard,
                                        contentDescription = "Credit Card"
                                    )
                                }
                            )
                            OutlinedTextField(
                                value = activeCardHolder,
                                onValueChange = { activeCardHolder = it },
                                label = { Text("Card Holder Name") },
                                modifier = Modifier.fillMaxWidth(),
                                leadingIcon = {
                                    Icon(
                                        imageVector = Icons.Filled.Person,
                                        contentDescription = "Card Holder"
                                    )
                                }
                            )
                            OutlinedTextField(
                                value = activeExpiryDate,
                                onValueChange = { activeExpiryDate = it },
                                label = { Text("Expiry Date (MM/YY)") },
                                modifier = Modifier.fillMaxWidth(),
                                leadingIcon = {
                                    Icon(
                                        imageVector = Icons.Filled.DateRange,
                                        contentDescription = "Expiry Date"
                                    )
                                }
                            )
                            OutlinedTextField(
                                value = activeCvv,
                                onValueChange = { activeCvv = it },
                                label = { Text("CVV") },
                                visualTransformation = PasswordVisualTransformation(),
                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                                modifier = Modifier.fillMaxWidth(),
                                leadingIcon = {
                                    Icon(
                                        imageVector = Icons.Filled.Lock,
                                        contentDescription = "CVV"
                                    )
                                }
                            )
                        }
                        "Yape" -> {
                            OutlinedTextField(
                                value = activePhoneNumber,
                                onValueChange = { activePhoneNumber = it },
                                label = { Text("Phone Number") },
                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),
                                modifier = Modifier.fillMaxWidth(),
                                leadingIcon = {
                                    Icon(
                                        imageVector = Icons.Filled.PhoneAndroid,
                                        contentDescription = "Phone"
                                    )
                                }
                            )
                            OutlinedTextField(
                                value = activeApprovalCode,
                                onValueChange = { activeApprovalCode = it },
                                label = { Text("Código de Aprobación") },
                                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                                modifier = Modifier.fillMaxWidth(),
                                leadingIcon = {
                                    Icon(
                                        imageVector = Icons.Filled.Lock,
                                        contentDescription = "Approval Code"
                                    )
                                }
                            )
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(
                        onClick = {
                            val isVisaValid = activeMethodType == "Visa" &&
                                    activeCardNumber.isNotBlank() && activeCardHolder.isNotBlank() && activeExpiryDate.isNotBlank() && activeCvv.isNotBlank()
                            val isOtherValid = activeMethodType == "Yape" &&
                                    activePhoneNumber.isNotBlank() && activeApprovalCode.isNotBlank()
                            if (isVisaValid || isOtherValid) {
                                val generatedCode = "PN-" + (100000..999999).random()
                                ticketCode = generatedCode
                                barcodeBitmap = generateBarcodeBitmap(generatedCode)
                                ticketGenerated = true
                                scope.launch {
                                    delay(10000)
                                    navController.navigate("success")
                                }
                            } else {
                                Toast.makeText(context, "Complete all required fields", Toast.LENGTH_SHORT).show()
                            }
                        },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RoundedCornerShape(24.dp),
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4468FF))
                    ) {
                        Text("Pagar", fontSize = 16.sp, color = Color.White)
                    }
                }
            }
        }
    } else {
        // ticket view pantalla completa estilo ticket real
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFF4468FF))
                .padding(24.dp),
            contentAlignment = Alignment.Center
        ) {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .wrapContentHeight()
            ) {
                // Ticket background with cutout circles
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .wrapContentHeight()
                ) {
                    // Ticket body
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(Color.White, shape = RoundedCornerShape(24.dp))
                            .padding(horizontal = 0.dp, vertical = 0.dp)
                    ) {
                        Spacer(modifier = Modifier.height(24.dp))
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 24.dp, vertical = 0.dp),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text("Parking Larcomar", fontWeight = FontWeight.Bold, fontSize = 16.sp)
                            Text("Malecón de la Reserva, Miraflores", fontSize = 12.sp, color = Color.Gray)
                            Spacer(modifier = Modifier.height(16.dp))
                            Column(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .background(Color(0xFFF5F5F5), shape = RoundedCornerShape(8.dp))
                                    .padding(16.dp)
                            ) {
                                Text("VEHICLE", fontSize = 12.sp, color = Color.Gray)
                                Text("2021 Audi Q3 • B 1234 CD", fontSize = 14.sp, fontWeight = FontWeight.Medium)
                                Spacer(modifier = Modifier.height(12.dp))
                                Text("DURATION", fontSize = 12.sp, color = Color.Gray)
                                Text("1 hora • 26 May. 2025", fontSize = 14.sp, fontWeight = FontWeight.Medium)
                            }
                            Spacer(modifier = Modifier.height(12.dp))
                            // Ticket slot
                            Text("Slot A01", fontWeight = FontWeight.Bold, fontSize = 18.sp)
                            Spacer(modifier = Modifier.height(16.dp))
                            // Dotted line separator
                            Canvas(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(1.dp)
                            ) {
                                drawLine(
                                    color = Color.LightGray,
                                    start = Offset(0f, 0f),
                                    end = Offset(size.width, 0f),
                                    strokeWidth = 2f,
                                    pathEffect = PathEffect.dashPathEffect(floatArrayOf(12f, 8f), 0f)
                                )
                            }
                            Spacer(modifier = Modifier.height(16.dp))
                            // Barcode
                            Image(
                                bitmap = barcodeBitmap!!.asImageBitmap(),
                                contentDescription = "Código de barras",
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(100.dp)
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            Text("ID: $ticketCode", fontSize = 12.sp, color = Color.Gray)
                            Spacer(modifier = Modifier.height(16.dp))
                            Button(
                                onClick = { navController.navigate(Routes.Dashboard.route) },
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(46.dp),
                                shape = RoundedCornerShape(20.dp),
                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4468FF))
                            ) {
                                Text("Navegar", fontSize = 16.sp, color = Color.White)
                            }
                            Spacer(modifier = Modifier.height(24.dp))
                        }
                    }
                    // Left and right circle cutouts (decorative)
                    Canvas(
                        modifier = Modifier
                            .matchParentSize()
                    ) {
                        val radius = 28.dp.toPx()
                        val centerLeft = Offset(0f, size.height / 2)
                        val centerRight = Offset(size.width, size.height / 2)
                        // Draw left circle (cutout)
                        drawCircle(
                            color = Color(0xFF4468FF),
                            radius = radius,
                            center = centerLeft,
                            style = Fill
                        )
                        // Draw right circle (cutout)
                        drawCircle(
                            color = Color(0xFF4468FF),
                            radius = radius,
                            center = centerRight,
                            style = Fill
                        )
                    }
                }
            }
        }
    }
}
